GDB Docs: https://www.gnu.org/software/gdb/documentation/
Valgrind: http://valgrind.org/docs/manual/quick-start.html
CLion and similar IDE's:  www.jetbrains.com

Use the -g flag on gcc (g++) to put debugging information into the files it creates.
NOTE: -ggdb will specifically create info for gdb.  It may be useful to choose which you use
		if you are developing on windows or mac, or in a VM, or something else weird.

Then run:
	gdb <program_name>

Or start gdb and run your program from it's console:
	gdb
	(gdb) file <program_name>

Then:
	(gdb) run

Breakpoints:
	(gdb) break <source_file_name>:<line_number>

Adds a breakpoint to the file at the specified line number.
	(gdb) break <function_name>

Causes a break everytime the function is called.

After breaking, there are two commands:

	(gdb) continue
	(gdb) step
	(gdb) next

Continue starts the program running again.
step is also sometimes called "step into", it runs the next line of code.
Sometimes it's called "step into" because it takes you inside of functions.
next is also sometimes called "step over", it runs the next line of code,
but it doesn't take you into functions.

	(gdb) print <variable_name>
	(gdb) print/x <variable_name>

Prints the value held by <variable_name> .  /x prints it in hexadecimal.

	(gdb) watch <variable_name>

Causes a break everytime the variable changes it's value

	(gdb) backtrace 			// produces a stack trace of what lead to a segmentation fault
	(gdb) where					//
	(gdb) finish				// run until current function is done
	(gdb) delete				// delete a breakpoint
	(gdb) info breakpoints  	// get info about currently set breakpoints

Conditional breakpoints are possible:
	(gdb) break <source_file_name>:<line_number> if <condition>

Pointers can be dereferenced and structs can be examined using the same syntax as C/C++

	(gdb) print <pointer_variable_name>
	(gdb) print *<pointer_variable_name>
	(gdb) print <struct_variable_name>
	(gdb) print struct.field
	(gdb) print ptr_to_struct->field

This is really useful for examining data structures, making sure they are being built properly.

	(gdb) print binary_tree_root->left->left->right->data

Valgrind
	valgrind --leak-check=yes <program_name>

	valgrind --leak-check=full \
         --show-leak-kinds=all \
         --track-origins=yes \
         --verbose \
         --log-file=valgrind-out.txt \
         ./executable exampleParam1

	
https://stackoverflow.com/questions/5134891/how-do-i-use-valgrind-to-find-memory-leaks














